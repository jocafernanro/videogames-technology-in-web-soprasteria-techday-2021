/* eslint-disable no-unused-vars */
/* eslint-disable no-plusplus */
import "./assets/styles/style.css";
import * as PIXI from "pixi.js";
import { CompositeTilemap } from "@pixi/tilemap";

window.PIXI = PIXI; // remove when finished

const { Application } = PIXI;
const { Container } = PIXI;
const loader = PIXI.Loader.shared;
const { resources } = PIXI.Loader.shared;
const { Graphics } = PIXI;
// const { TextureCache } = PIXI.utils;
const { Sprite } = PIXI;
// const { Text } = PIXI;
// const { TextStyle } = PIXI;

const resolutionRatio = 1.7777777777777777;
const width = 1280;
const height = Math.round(width / resolutionRatio);

let player;
let backgroundTilemap;

const app = new Application({
  backgroundColor: 0x211f30,
  width,
  height,
  roundPixels: true,
  antialias: true,
  transparent: false,
  resolution: window.devicePixelRatio || 1,
});

PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;

app.stage.scale.set(1.5);

// app.renderer.view.style.position = "absolute";
// app.renderer.view.style.display = "block";
// app.renderer.autoDensity = true;
// app.resizeTo = window;

document.querySelector("#main-container").appendChild(app.view);

function gameLoop(delta) {}

function printBackground(container) {
  backgroundTilemap = new CompositeTilemap();
  // prettier-ignore
  const backgroundMatrix = [
    [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
    [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
    [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
    [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
    [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0],
  ];

  const distant = 64;
  backgroundMatrix.forEach((tile, indexY) => {
    const y = indexY * distant;
    tile.forEach((col, indexX) => {
      const x = indexX * distant;
      if (col === 1) backgroundTilemap.tile("green", x, y);
      if (col === 2) {
        const rect = new PIXI.Rectangle(0, 32, 64, 32);
        const texture = PIXI.Texture(resources.background.textures.green);
        console.log(resources.background.textures.green);
        // backgroundTilemap.tile("Green.png", x, y);
      }
    });
  });
  container.addChild(backgroundTilemap);
}

function setup() {
  const gameContainerWidth = 1000;
  const gameContainerHeight = gameContainerWidth / resolutionRatio;

  const gameContainer = new Container();
  gameContainer.width = width;
  gameContainer.height = height;
  gameContainer.x = 0;
  gameContainer.y = 0;
  app.stage.addChild(gameContainer);

  printBackground(gameContainer);

  const terrainTextures = resources.terrain.textures;
  // prettier-ignore
  const scenarioTextures = [
    [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [ -1, -1, -1,  3, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,  4, -1, -1, -1, -1, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,114, -1, -1, -1, -1, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,114, -1, -1, -1, -1, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,132,133,133,133,100, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,101,102,102,102,102,102,102,102,102,102,102,102,102,102,102,103, 60, 61, 61, 61, 61, 61, 61, 61, 62,  5,  6,  6,  6,  7,114, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,119,120,120,120,120,120,120,120,120,120,120,120,120,120,120,121, 79, 80, 80, 80, 80, 80, 80, 80, 81, 22, 23, 23, 23, 24,114, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, 51, 52, 52, 52, 52, 53, -1, -1, -1, -1, -1, -1, -1, -1,119,120,120,120,120,120,120,120,120,120,120,120,120,120,120,121, 79, 80, 80, 80, 80, 80, 80, 80, 81, 22, 23, 23, 23, 24,114, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, 71, 71, 71, 71, 71, 72, -1, -1, -1, -1, -1, -1, -1, -1,135,136,136,136,136,136,136,136,136,136,136,136,136,136,136,137, 93, 94, 94, 94, 94, 94, 94, 94, 95, 22, 23, 23, 23, 24,114, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, 71, 71, 71, 71, 71, 72, -1, -1, -1, -1, -1, -1, -1, -1,125,126,125,126, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, 23, 23, 23, 24,114, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, 71, 71, 71, 71, 71, 72, -1, -1, -1, -1, -1, -1, -1, -1,138,139,138,139, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, 23, 23, 23, 24,114, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, 71, 71, 71, 71, 71, 72, -1, -1, -1, -1, -1, -1, -1, -1,125,126,125,126, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, 23, 23,125,126,114, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, 71, 71, 71, 51, 52, 52, 52, 52, 53, -1, -1, -1, -1, -1,138,139,138,139, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  5,  6,  6,  7, 38, 38,138,139,114, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, 71, 71, 71, 70, 71, 71, 71, 71, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 96, 97, 97, 97, 97, 97, 97, 97,118, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, 71, 71, 71, 70, 71, 71, 71, 71, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,114, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, 71, 71, 71, 70, 71, 71, 71, 71, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,114, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [ -1, -1, -1, 19, -1, -1, -1, -1, 71, 71, 71, 70, 71, 71, 71, 71, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,114, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [ -1, -1, -1, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,118, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
  ]

  scenarioTextures.forEach((row, rowIndex) => {
    row.forEach((colValue, colIndex) => {
      if (colValue === -1) return;
      const texturesArray = Object.values(terrainTextures);
      const texture = texturesArray[colValue];
      const sprite = new Sprite(texture);
      sprite.position.set(colIndex * texture.width, rowIndex * texture.height);

      gameContainer.addChild(sprite);
    });
  });

  player = new PIXI.AnimatedSprite(
    resources.player_idle.spritesheet.animations.player_idle
  );
  player.vx = 0;
  player.vy = 0;
  player.scale.x = -1;
  player.anchor.x = 1;
  // player.scale.x = 1;
  player.position.set(710, 330);
  player.animationSpeed = 0.167;
  player.play();

  const rockHead = new Sprite(resources.rock_head_idle.texture);
  rockHead.position.set(620, 380);
  rockHead.scale.set(2);
  gameContainer.addChild(rockHead);

  gameContainer.addChild(player);

  app.ticker.add(gameLoop);
}

loader
  .add("background", "./assets/images/background.json")
  .add("terrain", "./assets/images/terrain.json")
  .add("player_idle", "./assets/images/player_idle.json")
  .add("rock_head_idle", "./assets/images/rock_head_idle.png")
  .load(setup);
